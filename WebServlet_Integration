import java.io.BufferedWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;
import java.util.Scanner;


public class Decryption {

  static String inputPhotoFile;
	static File outputPhotoFile;
	static File decryptedPhotoFile;

	// Encrypted data block
	public static String[][] ciphertext = null;

	// Cipher key
	public static final String[][] key = {
		{ "2B", "28", "AB", "09" },
		{ "7E", "AE", "F7", "CF" },
		{ "15", "D2", "15", "4F" },
		{ "16", "A6", "88", "3C" } };

	public static void main(String[] args) throws IOException {

		ciphertext = new String[4][4];
		String hex = null;
		//outputPhotoFile=new File("/Users/yoli/Desktop/new_photo.txt");
		inputPhotoFile="/Users/yoli/Desktop/photo33a.txt";
		//decryptedPhotoFile = "/Users/yoli/Desktop/photo3.txt";


		///////////////// Convert Char File to HEX File
		outputPhotoFile = CreateNewFile("/Users/yoli/Desktop/new_photo.txt");

		hexDump(new java.io.PrintStream(outputPhotoFile), new File(inputPhotoFile));

		System.out.println("DONE Converting File");


		////////////// Parsear HEX file y decriptar /////////////

		decryptedPhotoFile = CreateNewFile("/Users/yoli/Desktop/decrypted_photo.txt");

		BufferedWriter out = new BufferedWriter(new FileWriter(decryptedPhotoFile, true));


		Scanner parser = new Scanner(new FileReader(outputPhotoFile));

		while(parser.hasNext()) {
			// leer bloques de 4x4 del file
			for(int i = 0; i < 4; i++){
				for(int j = 0; j < 4; j++){
					hex = parser.next();
					//System.out.println(hex);
					//int num = Integer.parseInt(hex,16);
					ciphertext[j][i] = hex;//Integer.toString(num);
					//System.out.println(hex);
				}
			}


			try{

				// Call decrypt function
				String [] temp = decrypt(ciphertext, key);
				
				System.out.println("Decrypting...");

				String[][] decr = Functions.toArray(temp[temp.length - 1]);

				for(int z= 0; z < 4; z++){
					for(int y = 0; y < 4; y++){
						//System.out.print(decr[y][z]+" ");

						// Write decrypted info to file
						try {

							//if(decr[y][z].equals("00") == false)
								out.write(decr[y][z]+" ");
						}
						catch (IOException e) {
							System.out.println("error");
						}
					}
				}
				//System.out.print("\n");
				//out.close();

				// Print decrypt array
				//print2DArray(Functions.toArray(temp[temp.length - 1]));
			}
			catch (StringIndexOutOfBoundsException siob){
				System.out.println("Error! Buffer size is not correct");
			}
			catch (NullPointerException npe){
				System.out.println("Error! Null Buffer");

			}
		}
		
		out.close();

		/////// Convertir decrypted data a JPEG

		// Write decripted data to a JPG

		String hex2 = null;
		Scanner parser2 = new Scanner(new FileReader("/Users/yoli/Desktop/decrypted_photo.txt"));

		String FILENAME = "/Users/yoli/Desktop/new_photo.jpg";
		DataOutputStream os2 = new DataOutputStream(new FileOutputStream(FILENAME));

		while(parser2.hasNext())
		{
			hex2 = parser2.next();
			int num = Integer.parseInt(hex2,16);
			//System.out.println("This is long:=" + num);
			os2.write(num);
		}
		os2.close();
		System.out.println("Done converting to JPEG");

	}








	//////////////////////////////////////// Methods ///////////////////////////////////////////

	public static File CreateNewFile(String st) throws IOException{
		File file=new File(st);

		if(!file.exists()){
			file.createNewFile();
			System.out.println("New file" +st+ " has been created to the current directory");
		}
		else
			System.out.println("File already exists");
		return file;
	}





	public static void hexDump(PrintStream out, File file) throws IOException {
		InputStream is = new FileInputStream(file);
		int i = 0;

		while (is.available() > 0) {
			StringBuilder sb1 = new StringBuilder();
			StringBuilder sb2 = new StringBuilder("   ");
			//out.printf("%04X  ", i * 16);
			for (int j = 0; j < 16; j++) {
				if (is.available() > 0) {
					int value = (int) is.read();
					sb1.append(String.format("%02X ", value));
					if (!Character.isISOControl(value)) {
						sb2.append((char)value);
					}
					else {
						sb2.append(".");
					}
				}
				else {
					for (;j < 16;j++) {
						sb1.append("   ");
					}
				}
			}
			out.print(sb1);
			//out.println(sb2);
			i++;
		}
		is.close();
	}



	/**
	 * Decrypts given ciphertext.
	 * @param state - ciphertext to decrypt
	 * @param key - key to use during decryption
	 * @return original plaintext
	 */
	public static String[] decrypt(String[][] state, String[][] key) {
		String[] key_set = Functions.expandKey(key);
		String[] result = new String[11];
		String[][] temp;

		// Decryption function calls
		temp = Functions.addRoundKey(state, Functions.toArray(key_set[40] + key_set[41] + key_set[42] + key_set[43]));

		int k = 40;
		result[0] = Functions.toString(temp);

		for (int i = 1; i < 10; i++) {
			temp = Functions.invShiftRows(temp);
			temp = Functions.invSubBytes(temp);
			temp = Functions.addRoundKey(temp, Functions.toArray(key_set[k - 4] + key_set[k - 3] + key_set[k - 2] + key_set[k - 1]));
			temp = Functions.invMixColumns(temp);
			result[i] = Functions.toString(temp);
			k -= 4;
		}

		temp = Functions.invShiftRows(temp);
		temp = Functions.invSubBytes(temp);
		temp = Functions.addRoundKey(temp, Functions.toArray(key_set[0] + key_set[1] + key_set[2] + key_set[3]));
		result[10] = Functions.toString(temp);

		return result;
	}

	/**
	 * Print original plaintext in 2D
	 * @param A
	 */
	public static void print2DArray(String[][] A) {
		System.out.println("Decrypted info");
		for (int i = 0; i < A.length; i++) {
			String s = "";
			for (int j = 0; j < A.length; j++)
				s += A[i][j]+"  ";
			System.out.println(s);
		}

	}

}
