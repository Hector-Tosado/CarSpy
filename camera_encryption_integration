// Camera
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "inc/hw_ints.h"
#include "driverlib/gpio.h"
#include "driverlib/uart.h"
#include "driverlib/interrupt.h"



// Variables for camera
volatile char response[100];
volatile char photo[13000];
volatile int a;
char cChar;
char temp;
int EndFlag = 0;
int StartFlag = 0;
int READ = 0;
int i, j, k = 0;
volatile int count = 0;
unsigned char command[16];

// Variables for Encryption
unsigned char state[4][4]; // temp, 128-bit blocks
unsigned char tempBuffer[4][4];
unsigned char cipherKey[4][4] ; // 128-bit key
unsigned char initVector[4][4]; // 128-bit key
unsigned char expandedKey[4][44];
int i, l, j, k, m, n, x, p, q = 0;
volatile unsigned char Rcon[4][10];
volatile unsigned char column[4][1];
int index = 4;
unsigned char roundKey[4][4];
volatile int roundNumber = 0;


//Rijndael S-Box Table
unsigned char sbox[256] =
{
  	0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
		0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
		0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
		0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
		0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
		0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
		0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
		0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
		0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
		0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
		0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
		0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
		0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
		0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
		0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
		0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
};




//*****************************************************************************
//
// Send command to the UART.
//
//*****************************************************************************
void
UARTSend(unsigned long ulBase, const unsigned char *pucBuffer, unsigned long ulCount)
{
	//
	// Loop while there are more characters to send.
	//
	while(ulCount--)
	{
		//
		// Write the next character to the UART.
		//
		UARTCharPut(ulBase, *pucBuffer++);
	}
}



//*****************************************************************************
//
// Receive response from the UART.
//
//*****************************************************************************
void
UARTReceive(unsigned long ulBase, volatile char pucBuffer[])
{
	//
	// Loop while there are more characters to send.
	//
	if(READ==1){ // Photo raw data
		while(UARTCharsAvail(ulBase) && !EndFlag)
		{
			// Read the next character from the UART
			cChar = UARTCharGet(ulBase);

			// Discard first 5 characters
			if(i >=5)
			{
				pucBuffer[count++] = cChar;

				// If data reaches FF D9
				if((temp == 255) && (cChar == 217)){
					EndFlag = 1;
				}

				temp = cChar;
			}

			i++;
			//Print device (photo) response to terminal
			//UARTCharPut(UART0_BASE, cChar);
		}
	}

	else
		while(UARTCharsAvail(ulBase))
		{
			// Read the next character from the UART
			cChar = UARTCharGet(ulBase);
			pucBuffer[a++] = cChar;

			//Print device response to terminal
			UARTCharPut(UART0_BASE, cChar);
		}
}



//*****************************************************************************
//
// The UART interrupt handler.
//
//*****************************************************************************
void
UART1IntHandler(void)
{
	unsigned long ulStatus;

	// Get the interrupt status.
	ulStatus = UARTIntStatus(UART1_BASE, true);

	// Clear the asserted interrupts.
	UARTIntClear(UART1_BASE, ulStatus);

	// If there is data in the UART call Receive function
	// with corresponding buffer
	if(READ == 1)
		UARTReceive(UART1_BASE, photo);
	else
		UARTReceive(UART1_BASE, response);

}


void resetCamera(){
	//Reset Command
	command[0] = 86; 	// 0x56
	command[1] = 00; 	// 0x00
	command[2] = 38;	// 0x26
	command[3] = 00;	// 0x00

	// Send to UART0 using UARTSend
	UARTSend((unsigned long)UART0_BASE, command, sizeof(command));

	// Send to UART1 using UARTSend
	UARTSend((unsigned long)UART1_BASE, command, sizeof(command));
}


void takePhoto(){

	// Take Picture Command
	command[0] = 86;	// 0x56
	command[1] = 00;	// 0x00
	command[2] = 54;	// 0x36
	command[3] = 01;	// 0x01
	command[4] = 00;	// 0x00

	// Delay 2-3 secs before taking picture
	SysCtlDelay(15000000); // @ 50MHz each MCU cycle is 20ns

	// Send to UART0 using UARTSend
	UARTSend((unsigned long)UART0_BASE, command, sizeof(command));

	// Send to UART1 using UARTSend
	UARTSend((unsigned long)UART1_BASE, command, sizeof(command));
}


void readPhotoLength(){
	// Read JPEG file size command
	command[0] = 86;	// 0x56
	command[1] = 00;	// 0x00
	command[2] = 52;	// 0x34
	command[3] = 01;	// 0x01
	command[4] = 00;	// 0x00

	// Delay 2-3 secs before taking picture
	SysCtlDelay(150000000); // @ 50MHz each MCU cycle is 20ns

	// Send to UART0 using UARTSend
	UARTSend((unsigned long)UART0_BASE, command, sizeof(command));

	// Send to UART1 using UARTSend
	UARTSend((unsigned long)UART1_BASE, command, sizeof(command));
}


void readPhoto(){
		// Read JPEG file content

		// Delay 2-3 secs before reading data
		SysCtlDelay(15000000); // @ 50MHz each MCU cycle is 20ns

		command[0] = 86;	// 0x56
		command[1] = 00;	// 0x00
		command[2] = 50;	// 0x32
		command[3] = 12;	// 0x0C
		command[4] = 00;	// 0x00
		command[5] = 10; 	// 0x0A
		command[6] = 00;	// 0x00
		command[7] = 00;	// 0x00
		command[8] = 00;	// 0xMM
		command[9] = 00;	// 0xMM
		command[10] = 00;	// 0x00
		command[11] = 00;	// 0x00
		command[12] = 50;	// 0xKK - 0x00                 // KK es el tamano de la foto
		command[13] = 200;	// 0xKK - 0x20                 //50 200 dec es 13KB
		command[14] = 00;	// 0xXX - 0x00
		command[15] = 10;	// 0xXX - 0x0A
		a += 32;

		// Delay 2-3 secs before reading data
		SysCtlDelay(15000000); // @ 50MHz each MCU cycle is 20ns

		// READ Flag
		READ = 1;

		// Send to UART0 using UARTSend
		UARTSend((unsigned long)UART0_BASE, command, sizeof(command));

		// Send to UART1 using UARTSend
		UARTSend((unsigned long)UART1_BASE, command, sizeof(command));

}



// *************************************************************************** //
/////////////////////////////////// ENCRYPTION /////////////////////////////////
// *************************************************************************** //

//*****************************************************************************
//
// Getting 128-bit (16 bytes) photo blocks for encryption
//
//****************************************************************************
void getNextPhotoBlock(){
	state[0][0] = 0x0A;
	state[0][1] = 0x85;
	state[0][2] = 0x30;
	state[0][3] = 0x09;
	state[1][0] = 0x0F;
	state[1][1] = 0x5A;
	state[1][2] = 0x31;
	state[1][3] = 0x37;
	state[2][0] = 0xF6;
	state[2][1] = 0x30;
	state[2][2] = 0x98;
	state[2][3] = 0x07;
	state[3][0] = 0xA8;
	state[3][1] = 0x8D;
	state[3][2] = 0xA2;
	state[3][3] = 0x34;
}

//*****************************************************************************
//
// Key Generation
//
//****************************************************************************
void generateKey(){
	cipherKey[0][0] = 0x2B;
	cipherKey[0][0] = 0x28;
	cipherKey[0][0] = 0xAB;
	cipherKey[0][0] = 0x09;
	cipherKey[0][0] = 0x7E;
	cipherKey[0][0] = 0xAE;
	cipherKey[0][0] = 0xF7;
	cipherKey[0][0] = 0xCF;
	cipherKey[0][0] = 0x15;
	cipherKey[0][0] = 0xD2;
	cipherKey[0][0] = 0x15;
	cipherKey[0][0] = 0x4F;
	cipherKey[0][0] = 0x16;
	cipherKey[0][0] = 0xA6;
	cipherKey[0][0] = 0x88;
	cipherKey[0][0] = 0x3C;

}


//*****************************************************************************
//
// Get S-Box Value
//
//****************************************************************************
unsigned char getSBoxValue(unsigned char num)
{
	return sbox[num]; // returns corresponding value of the S-Box
}


//*****************************************************************************
//
// Substitute Bytes
//
//****************************************************************************
void SubBytes()
{
	int m = 0;
	for(m =0; m < 4; m++){
		for(n=0; n < 4; n++){
			state[n][m] = getSBoxValue(state[n][m]); // find value in table and replace
		}
	}
}


//*****************************************************************************
//
// Shift Rows
//
//*****************************************************************************
void ShiftRows()
{
	for(p = 0; p < 4 ; p++){
		x = p;
		for(k =0; k < 4; k++){
			tempBuffer[k][p] = state[k][x % 4]; // calculate position for each element
			x++;
		}
	}

	int a1;
	int a2;
	for(a1 = 0; a1 < 4; a1++)
		for(a2 = 0; a2 < 4 ; a2++)
			state[a2][a1] = tempBuffer[a2][a1]; // copy temp to state buffer
}


//*****************************************************************************
//
// Multiply by 2
//
//*****************************************************************************
// Used in MixRows operation
char MultBy2(char num1)
{
	char result1;

	if((num1 & 0x80) == 0x80){
		result1 = (num1 << 1) ^ 0x1b; // shift left and xor with 0x1b
	}

	else
		result1 = (num1 << 1); // shift left 1 bit

	return result1;
}


//*****************************************************************************
//
// Multiply by 3
//
//*****************************************************************************
// Used in MixColumns operation
char MultBy3(char num2)
{
	char result2;

	if((num2 & 0x80) == 0x80){
		// shift left 1 bit, xor with 0x1b and xor with original
		result2 = ((num2 << 1) ^ 0x1b) ^ num2;
	}

	else
		result2 = (num2 << 1) ^ num2 ; // shift left 1 bit

	return result2;
}


//*****************************************************************************
//
// Mix Columns
//
//*****************************************************************************
void MixColumns()
{
	// Each function was computed using the Rijndael Mix Columns where
	// 1 means no change, 2 shift left, 3 shift left and xor with original
	// if leftmost bit is 1 before shift xor with 0x1b too
	// Matrix used: [2 3 1 1; 1 2 3 1; 1 1 2 3; 3 1 1 2]


	for(i = 0; i < 4; i++)
		for(j = 0; j < 4; j++){
			if(i == 0)
				tempBuffer[0][j] = (MultBy2(state[0][j]) ^ MultBy3(state[1][j]) ^ (state[2][j]) ^ (state[3][j]));
			else if(i == 1)
				tempBuffer[1][j] = ((state[0][j]) ^ MultBy2(state[1][j]) ^ MultBy3(state[2][j]) ^ (state[3][j]));
			else if(i == 2)
				tempBuffer[2][j] = ((state[0][j]) ^ (state[1][j]) ^ MultBy2(state[2][j]) ^ MultBy3(state[3][j]));
			else if(i == 3)
				tempBuffer[3][j] = (MultBy3(state[0][j]) ^ (state[1][j]) ^ (state[2][j]) ^ MultBy2(state[3][j]));
		}

	// Copy tempBuffer into state
	int a3;
	int a4;
	for(a3 = 0; a3 < 4; a3++)
		for(a4 = 0; a4 < 4 ; a4++)
			state[a4][a3] = tempBuffer[a4][a3];

}


//*****************************************************************************
//
// Rotate Column in AddexpandedKey operation.
//
//*****************************************************************************
void RotateColumn()
{
	//	volatile unsigned char temp;
	int u;
	for(u=0; u < 3; u++){
		column[u][0] = expandedKey[u+1][index-1];
	}

	column[3][0] = expandedKey[0][index-1];
}



//*****************************************************************************
//
// Substitute Bytes in AddexpandedKey operation.
//
//*****************************************************************************
void SubBytesARK()
{
	int v;
	for(v=0; v < 4; v++){
		column[v][0] = getSBoxValue(column[v][0]);
	}
}


//*****************************************************************************
//
// Key Schedule Process
//
//*****************************************************************************
void keySchedule() {

	int i1;
	int j1;
	if(index % 4 == 0){
		RotateColumn();
		SubBytesARK();
		for(i1 = 0; i1 < 4; i1++){
			expandedKey[i1][index]= expandedKey[i1][index-4] ^ column[i1][0] ^ Rcon[i1][(index/4 - 1)];
		}
	}
	else
		for(j1 = 0; j1 < 4; j1++){
			expandedKey[j1][index] = expandedKey[j1][index-1] ^ expandedKey[j1][index-4];
		}
	index++;
}


//*****************************************************************************
//
// Expand Key
//
//*****************************************************************************
void expandKey()
{
	int y;
	for(y = 0; y < 40; y++)
		keySchedule();
}

//*****************************************************************************
//
// Add Round Key
//
//*****************************************************************************
void AddRoundKey()
{
	int s, t;
	int start = roundNumber*4;
	for(s = start; s < (start+ 4); s++)
		for(t = 0; t < 4 ; t++)
			roundKey[t][s-roundNumber*4] = expandedKey[t][s];

	roundNumber++;

	// AddexpandedKey - bitwise xor state and round key
	int n1;
	int m1;
	for(n1 = 0; n1 < 4; n1++)
		for(m1 = 0; m1 < 4; m1++)
		{
			state[m1][n1] = state[m1][n1] ^ roundKey[m1][n1];
		}
}


//*****************************************************************************
//
// Fill Round Constant Table
//
//*****************************************************************************
void fillRoundConTable(){
	Rcon[0][0] = 0x01;
	Rcon[0][1] = 0x02;
	Rcon[0][2] = 0x04;
	Rcon[0][3] = 0x08;
	Rcon[0][4] = 0x10;
	Rcon[0][5] = 0x20;
	Rcon[0][6] = 0x40;
	Rcon[0][7] = 0x80;
	Rcon[0][8] = 0x1B;
	Rcon[0][9] = 0x36;
}

//*****************************************************************************
//
// Copy Key to the Expanded Key Buffer
//
//*****************************************************************************
void copyKeyToExpandedKey(){
	expandedKey[0][0] = 0x2B;
	expandedKey[0][1] = 0x28;
	expandedKey[0][2] = 0xAB;
	expandedKey[0][3] = 0x09;
	expandedKey[1][0] = 0x7E;
	expandedKey[1][1] = 0xAE;
	expandedKey[1][2] = 0xF7;
	expandedKey[1][3] = 0xCF;
	expandedKey[2][0] = 0x15;
	expandedKey[2][1] = 0xD2;
	expandedKey[2][2] = 0x15;
	expandedKey[2][3] = 0x4F;
	expandedKey[3][0] = 0x16;
	expandedKey[3][1] = 0xA6;
	expandedKey[3][2] = 0x88;
	expandedKey[3][3] = 0x3C;
}

//////////////////////////////////////////////////////////////////////////////////////////




// *************************************************************************** //
////////////////////////////// END OF ENCRYPTION ///////////////////////////////
// *************************************************************************** //



int main(void)
{

	// Setear clock
	SysCtlClockSet(SYSCTL_SYSDIV_4 | SYSCTL_USE_PLL | SYSCTL_OSC_MAIN | SYSCTL_XTAL_16MHZ);

	// Configuring UART ports
	SysCtlPeripheralEnable(SYSCTL_PERIPH_UART1);
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);

	SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);

	// Enable processor interrupts
	IntMasterEnable();

	// Configure the GPIO pin muxing for the UART function.
	GPIOPinConfigure(0x00000001);//GPIO_PA0_U0RX
	GPIOPinConfigure(0x00000401);//GPIO_PA1_U0TX
	GPIOPinConfigure(0x00010001);//GPIO_PB0_U0RX
	GPIOPinConfigure(0x00010401);//GPIO_PB1_U0TX

	// configure GPIO A0 and A1 for use as a peripherals.
	GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1);
	GPIOPinTypeUART(GPIO_PORTB_BASE, GPIO_PIN_0 | GPIO_PIN_1);

	// Configure the UART for 38,400, 8-N-1 operation.
	UARTConfigSetExpClk(UART0_BASE, SysCtlClockGet(), 38400,
			(UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE |
					UART_CONFIG_PAR_NONE));
	UARTConfigSetExpClk(UART1_BASE, SysCtlClockGet(), 38400,
			(UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE |
					UART_CONFIG_PAR_NONE));

	// Enable interrupt
	IntEnable(INT_UART1);
	UARTIntEnable(UART1_BASE, UART_INT_RX | UART_INT_RT);

	// Put a character on terminal to indicate start.
	UARTCharPut(UART0_BASE, '!');


	resetCamera();
	//takePhoto();
	//readPhotoLength();
	//readPhoto();


	// *********************************************************************** //
	///////////////////////////// ENCRYPTION /////////////////////////////////
	// *********************************************************************** //

	// Getting plaintext to be encrypted
	getNextPhotoBlock();

	// Key
	generateKey();

	// Putting key in the expanded key buffer
	copyKeyToExpandedKey();

	// Fill round constant (Rcon) Table
	fillRoundConTable();

	// Call to expanded key function
	expandKey();

	// Encryption Process
	AddRoundKey();

	int t1;

	for(t1 = 0; t1 < 9; t1++){
		SubBytes();
		ShiftRows();
		MixColumns();
		AddRoundKey();
	}

	SubBytes();
	ShiftRows();
	AddRoundKey();

	while(1){}

	return 0;
}




