#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "inc/hw_ints.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "driverlib/uart.h"
#include "driverlib/pin_map.h"
#include "driverlib/rom_map.h"
#include "driverlib/interrupt.h"
#include "utils/uartstdio.h"
#include "string.h"
#include "stdio.h"
#include "stdlib.h"
#include "driverlib/flash.h"

// Variables for camera
volatile char response[100];
volatile char photo[13000];
volatile int a;
char cChar;
char temp;
int EndFlag = 0;
int StartFlag = 0;
int READ = 0;
int i = 0;
//int j = 0;
//int k = 0;
volatile int count = 0;

// Variables for Encryption
unsigned char state[4][4]; // temp, 128-bit blocks
//unsigned char outBuffer[16]; // temp, 128-bit blocks
//unsigned char b[16]; // temp, 128-bit blocks
unsigned char tempBuffer[4][4];
unsigned char cipherKey[4][4] ; // 128-bit key
unsigned char initVector[4][4]; // 128-bit key
unsigned char roundKey[4][4];
int l = 0;
int j = 0;
int k = 0;
int m = 0;
int n = 0;
int x = 0;
int p = 0;
int q = 0;
volatile int index = 0; // to be used to mark blocks in photo buffer
//volatile int start_index = 0;
//volatile int end_index = 16;
volatile int photo1[128];

//Tables
unsigned char sbox[256] =
{
		0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
		0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
		0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
		0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
		0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
		0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
		0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
		0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
		0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
		0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
		0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
		0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
		0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
		0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
		0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
		0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
};

//*****************************************************************************
//
// Send command to the UART.
//
//*****************************************************************************
void
UARTSend(unsigned long ulBase, const unsigned char *pucBuffer, unsigned long ulCount)
{
	//
	// Loop while there are more characters to send.
	//
	while(ulCount--)
	{
		//
		// Write the next character to the UART.
		//
		UARTCharPut(ulBase, *pucBuffer++);
	}
}



//*****************************************************************************
//
// Receive response from the UART.
//
//*****************************************************************************
void
UARTReceive(unsigned long ulBase, volatile char pucBuffer[])
{
	//
	// Loop while there are more characters to send.
	//
	if(READ==1){ // Photo raw data
		while(UARTCharsAvail(ulBase) && !EndFlag)
		{
			// Read the next character from the UART
			cChar = UARTCharGet(ulBase);

			if(i >=5)
			{
				pucBuffer[count++] = cChar;

				// new code
				if((temp == 255) && (cChar == 217)){
					EndFlag = 1;
				}

				temp = cChar;
			}
			i++;
			//Print device response to terminal
			//UARTCharPut(UART0_BASE, cChar);
		}
	}

	else
		while(UARTCharsAvail(ulBase))
		{
			// Read the next character from the UART
			cChar = UARTCharGet(ulBase);
			pucBuffer[a++] = cChar;

			//Print device response to terminal
			UARTCharPut(UART0_BASE, cChar);
		}
}



//*****************************************************************************
//
// The UART interrupt handler.
//
//****************************************************************************
void
UART1IntHandler(void)
{
	unsigned long ulStatus;

	// Get the interrupt status.
	ulStatus = UARTIntStatus(UART1_BASE, true);

	// Clear the asserted interrupts.
	UARTIntClear(UART1_BASE, ulStatus);

	// Mientras haya data en el UART1
	if(READ == 1)
		UARTReceive(UART1_BASE, photo);
	else
		UARTReceive(UART1_BASE, response);

}


//*****************************************************************************
//
// Key & IV Generator
//
//****************************************************************************
void
KeyIVGenerator()
{
	////// Generate Random Key & Initialization Vector
	// Generate Key & IV random de 0 - 255
	for(m = 0; m < 4; m++){
		for(n = 0; n < 4; n++)
		{
			// for testing purposes, the key & IV will be the same
			cipherKey[n][m] = rand() % 255; // check pq salen los mismos valores siempre
			initVector[n][m] = cipherKey[n][m]; // IV same as key for testing purposes
		}
	}
}



//*****************************************************************************
//
// Get S-Box Value
//
//****************************************************************************
unsigned char getSBoxValue(unsigned char num)
{
	return sbox[num];
}


//*****************************************************************************
//
// Substitute Bytes
//
//****************************************************************************
void SubBytes(unsigned char buffer[4][4])
{
	for(m =0; m < 4; m++){
		for(n=0; n < 4; n++){
			tempBuffer[n][m] = getSBoxValue(buffer[n][m]);
		}
	}
}


//*****************************************************************************
//
// Shift Rows
//
//****************************************************************************
void
ShiftRows(unsigned char buffer1[4][4])
{
	for(p = 0; p < 4 ; p++){
		x = p;
		for(k =0; k < 4; k++){
			tempBuffer[q][p] = buffer1[q][x % 4];
			x++;
		}
	}
}


char MultBy2(char num1)
{
	char result1;

	if((num1 & 0x80) == 0x80){
		result1 = (num1 << 1) ^ 0x1b; // shift left and xor with 0x1b
	}

	else
		result1 = (num1 << 1); // shift left 1 bit

	return result1;
}



char MultBy3(char num2)
{
	char result2;

	if((num2 & 0x80) == 0x80){
		// shift left 1 bit, xor with 0x1b and xor with original
		result2 = ((num2 << 1) ^ 0x1b) ^ num2;
	}

	else
		result2 = (num2 << 1) ^ num2 ; // shift left 1 bit

	return result2;
}

//*****************************************************************************
//
// Mix Columns
//
//****************************************************************************
void
MixColumns(unsigned char b[4][4])
{
	// Each function was computed using the Rijndael Mix Columns where
	// 1 means no change, 2 shift left, 3 shift left and xor with original
	// if leftmost bit is 1 before shift xor with 0x1b too
	// Matrix used: [2 3 1 1; 1 2 3 1; 1 1 2 3; 3 1 1 2]


	for(i = 0; i < 4; i++)
		for(j = 0; j < 4; j++){
			if(i == 0)
				tempBuffer[0][j] = (MultBy2(b[0][j]) ^ MultBy3(b[1][j]) ^ (b[2][j]) ^(b[3][j]));
			else if(i == 1)
				tempBuffer[1][j] = ((b[0][j]) ^ MultBy2(b[1][j]) ^ MultBy3(b[2][j]) ^ (b[3][j]));
			else if(i == 2)
				tempBuffer[2][j] = ((b[0][j]) ^ (b[1][j]) ^ MultBy2(b[2][j]) ^ MultBy3(b[3][j]));
			else if(i == 3)
				tempBuffer[3][j] = (MultBy3(b[0][j]) ^ (b[1][j]) ^ (b[2][j]) ^ MultBy2(b[3][j]));
		}


}




//*****************************************************************************
//
// Add Round Key
//
//*****************************************************************************
void
AddRoundKey(unsigned char buffer2[4][4], unsigned char key[4][4])
{
	// AddRoundKey - bitwise xor state and round key
	for(n = 0; n < 4; n++)
		for(m = 0; m < 4; m++)
		{
			tempBuffer[m][n] = buffer2[m][n] ^ key[m][n];
		}
}



//////////////////////////////////////////////////////////////////////////////////////////

int main(void)
{
	unsigned char bytes[16]; // cambiar nombre de bytes por command
	unsigned char a = 0;
	unsigned int MH;
	unsigned int ML;

	// Setear clock
	SysCtlClockSet(SYSCTL_SYSDIV_4 | SYSCTL_USE_PLL | SYSCTL_OSC_MAIN | SYSCTL_XTAL_16MHZ);

	//Configuracion de los puertos UART que se van a usar en el micro
	SysCtlPeripheralEnable(SYSCTL_PERIPH_UART1);
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);

	SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);

	// Enable processor interrupts
	IntMasterEnable();

	// Configure the GPIO pin muxing for the UART function.
	GPIOPinConfigure(0x00000001);//GPIO_PA0_U0RX
	GPIOPinConfigure(0x00000401);//GPIO_PA1_U0TX
	GPIOPinConfigure(0x00010001);//GPIO_PB0_U0RX
	GPIOPinConfigure(0x00010401);//GPIO_PB1_U0TX

	// Since GPIO A0 and A1 are used for the UART function, they must be
	// configured for use as a peripheral function (instead of GPIO).
	GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1);
	GPIOPinTypeUART(GPIO_PORTB_BASE, GPIO_PIN_0 | GPIO_PIN_1);

	// Configure the UART for 115,200, 8-N-1 operation.
	UARTConfigSetExpClk(UART0_BASE, SysCtlClockGet(), 38400,
			(UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE |
					UART_CONFIG_PAR_NONE));
	UARTConfigSetExpClk(UART1_BASE, SysCtlClockGet(), 38400,
			(UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE |
					UART_CONFIG_PAR_NONE));

	// Enable interrupt
	IntEnable(INT_UART1);
	UARTIntEnable(UART1_BASE, UART_INT_RX | UART_INT_RT);

	// Put a character to show start of example. This will display on the terminal.
	UARTCharPut(UART0_BASE, '!');


	////// TEST///////

	// Fill Photo Buffer with Dummy Data
	SysCtlDelay(10000000);
	for(k = 0; k < 128; k++)
		photo1[k] = k;

	// Copy 128-bit block into state buffer
	for(j = 0; j < 4; j++){
		for(l = 0; l < 4; l++){
			state[l][j] = photo1[index];
			index++;
		}
	}


	//Testing methods
	//SubBytes(state); OK
	//ShiftRows(state); OK
	//roundKey[0][0] = MultBy2(0xA0); OK
	//roundKey[0][0] = MultBy3(0xA0); OK


	state[0][0] = 0xD4;
	state[0][1] = 0xE0;
	state[0][2] = 0xB8;
	state[0][3] = 0x1E;
	state[1][0] = 0xBF;
	state[1][1] = 0xB4;
	state[1][2] = 0x41;
	state[1][3] = 0x27;
	state[2][0] = 0x5D;
	state[2][1] = 0x52;
	state[2][2] = 0x11;
	state[2][3] = 0x98;
	state[3][0] = 0x30;
	state[3][1] = 0xAE;
	state[3][2] = 0xF1;
	state[3][3] = 0xE5;

	SysCtlDelay(10000000);

	MixColumns(state);



	//	///// Zero Padding
	//	// Checking if data is divisible by 128 bits (16 bytes)
	//	if(count % 16 != 0)
	//		count = 16 - (count % 16); // zero padding



	//char num1 = 0xA0;
	//char result1;// = num1 & 0x0F;
	//char result2;// = num1 & 0x80;
	//
	//result1 = (0x80 & 0x80);
	//result2 = (num1 & 0xF0);
	//
	//roundKey[0][0] = (0x80 & 0x80);
	//roundKey[0][1] = result2;;
	//	//
	//		int n1;
	//		int n2;
	//	//
	//		n1 = (int)roundKey[0][0];
	//		n2 = (int)roundKey[0][1];
	//	//
	//		photo1[0] = n1;
	//		photo1[1] = n2;

	while(1){}

	return 0;
}



